plugins {
  id 'com.gradle.build-scan' version '1.11'
  id 'java'
  id "edu.sc.seis.launch4j" version "2.4.2"
}

//apply plugin: 'java'
apply plugin: 'project-report'
apply plugin: 'distribution'
apply plugin: 'build-dashboard'
apply plugin: "jacoco"


buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
    publishAlways()
}


def echo(mess) {
    print mess
}
def info() {
   println "\n Фаза конфинурации"
print " buildDir "  print  project.buildDir
println  "\n rootDir:      "+ project.rootDir +"\n";


tasks.whenTaskAdded { task ->
    task.ext.mes = 'добавлена задача '+task
    println task.mes
}


gradle.taskGraph.whenReady {taskGraph ->
   println "\n\n||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||"
    println "Found " + taskGraph.allTasks.size() + " tasks."
    taskGraph.allTasks.forEach { task ->
        print"\n"
        print task
        print  "  --dependsOn-- "
        task.dependsOn.forEach { dep ->
             print   dep
        }
    }
     println "\n\n||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n\n"

}


 println "\n КОНФИГУРАЦИИ \n"
configurations.each{

     it->println it

}
println "\n\n  "
}
//info()

ext {
    author = "Alexander"
    mainClass= 'basisFx.appCore.EntryPoint'
    mainClassName = mainClass
}

task wrapper(type: Wrapper) {
   gradleVersion = '4.3.1'
}


sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
description = 'An app  build'
version = '0.1'

testResultsDirName="my_testResults"
testReportDirName="my_testReport"
libsDirName="output"
distsDirName="dist"
docsDirName="my_docs"




jacocoTestReport.enabled=true
//assemble.enabled = false
//distTar.enabled = false
//distZip.enabled = false

sourceSets {
  main {
    java {
      srcDirs  'src/sourcecode'
//      output.classesDir 'build/classes/main'
//      output.classesDir 'build/classes/java/main'
    }
  }
}

sourceSets {
  main {
    resources {
      srcDirs  'src/res'
    }
  }
}

sourceSets{
    test{
        java{
            srcDirs "src/tests"
        }
        resources{
            srcDirs "src/res"
        }
    }
}

//test { finalizedBy jacocoTestReport }
test.finalizedBy(project.tasks.jacocoTestReport)

jacocoTestReport {
   additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)

    reports {
        xml.enabled true
        csv.enabled true
        html.destination file("${buildDir}/reports/jacoco")
    }
    executionData = files('build/jacoco/test.exec')
}

//
//repositories {
//
//}
//dependencies {
//
//}



repositories {
    mavenCentral()
    jcenter()
}

dependencies {

//     compile 'org.kordamp.bootstrapfx:bootstrapfx-core:0.2.2'


    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testCompile("org.junit.jupiter:junit-jupiter-api:5.0.0-M4")
    testRuntime("org.junit.vintage:junit-vintage-engine:4.12.0-M4")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.0.0-M4")
    testCompile("org.junit.platform:junit-platform-runner:1.0.0-M4")

//    compile group: 'com.guigarage', name: 'flatter', version: '0.7'
//    compile group: 'org.aerofx', name: 'aerofx', version: '0.2'
//    compile group: 'com.aquafx-project', name: 'aquafx', version: '0.2'

    compile group: 'log4j', name: 'log4j', version: '1.2.17'

//    compile group: 'com.jfoenix', name: 'jfoenix', version: '1.11.0'

    testCompile group: 'org.hsqldb', name: 'hsqldb', version: '2.4.0'


    compile group: 'us.fatehi', name: 'schemacrawler-hsqldb', version: '14.17.04'

	 compile 'com.google.code.gson:gson:2.8.2'
	 compile group: 'com.google.guava', name: 'guava', version: '23.5-jre'
	 compile group: 'com.google.inject', name: 'guice', version: '4.1.0'
	 compile group: 'com.google.http-client', name: 'google-http-client', version: '1.23.0'

    compile group: 'org.apache.poi', name: 'poi', version: '3.16'
    compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.16'
    compile group: 'org.apache.poi', name: 'poi-ooxml-schemas', version: '3.16'
    compile group: 'org.apache.poi', name: 'poi-scratchpad', version: '3.16'

    compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.21.0'

//    compile group: 'org.controlsfx', name: 'controlsfx', version: '9.0.0'

    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.2.12.Final'


//    compile group: 'de.jensd', name: 'fontawesomefx', version: '8.9'
//    compile group: 'de.jensd', name: 'fontawesomefx-commons', version: '9.1.2'
//    compile group: 'de.jensd', name: 'fontawesomefx-materialicons', version: '2.2.0-9.1.2'
//    compile group: 'de.jensd', name: 'fontawesomefx-icons525', version: '4.2.0-9.1.2'
//    compile group: 'de.jensd', name: 'fontawesomefx-controls', version: '9.1.2'
//    compile group: 'de.jensd', name: 'fontawesomefx-weathericons', version: '2.0.10-9.1.2'
//    compile group: 'de.jensd', name: 'fontawesomefx-materialdesignfont', version: '2.0.26-9.1.2'
//    compile group: 'de.jensd', name: 'fontawesomefx-octicons', version: '4.3.0-9.1.2'

}


jar  {

    baseName = 'Komfort'
    version =  '0.1'

    manifest {
        attributes(
            "Class-Path": configurations.compile.collect {  "lib/" + it.getName() }.join(" "),
             'Main-Class': mainClass,
             'Manifest-Version': 1.0
//            ,'SplashScreen-Image:': "splash/splash.png"


        )
    }

//    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }}
//    from configurations.compile.collect {    entry -> zipTree(entry)  }
}


////  from configurations.testRuntime - configurations.runtime
//    from configurations.runtime


//compileJava.options.compilerArgs = ["-Xlint:unchecked", "-Xlint:deprecation"]



task copyLib(type: Copy) {

           into 'build/output/lib'
//           with jar
            from configurations.compile

}


distributions {
  main {
    contents {
      baseName = 'Komfort'
      into ('lib') {
        from (project.configurations.runtime)
      }

        from jar

//       into ('splash') {
//        from ('src/res/splash')  include '**/*.png'
//      }



    }
  }
}



task runApp(type: JavaExec) {
   classpath = sourceSets.main.runtimeClasspath

   main = 'basisFx.appCore.EntryPoint'

 }


build.dependsOn jacocoTestReport
build.dependsOn projectReport
build.dependsOn buildDashboard
build.dependsOn copyLib



//build.dependsOn distZip

//distZip.dependsOn  assemble
//distZip.mustRunAfter  assemble
