plugins {
  id 'com.gradle.build-scan' version '1.11'
  id 'java'
  id "edu.sc.seis.launch4j" version "2.4.2"
}
apply plugin: 'java'
apply plugin: 'project-report'
apply plugin: 'distribution'
apply plugin: 'build-dashboard'
apply plugin: "jacoco"

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
    publishAlways()
}
//task info(type: GradleBuild) {
//    buildFile = 'reflect.gradle'
//    tasks = ['info']
//}
ext {
    author = "Alexander"
    mainClass= 'basisFx.appCore.EntryPoint'
    mainClassName = mainClass
}
task wrapper(type: Wrapper) {
   gradleVersion = '4.3.1'
}
sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
description = 'An app build'
version = '0.1'

testResultsDirName="my_testResults"
testReportDirName="my_testReport"
libsDirName="output"
distsDirName="dist"
docsDirName="my_docs"
jacocoTestReport.enabled=true
assemble.enabled = true
distTar.enabled = false
distZip.enabled = true


sourceSets {main {
    java {
        srcDirs  'src/sourcecode'

//        //if you truly want to override the defaults:
//        output.resourcesDir = file('out/bin')
//        // Compiled Java classes should use this directory
//        java.outputDir = file('out/bin')

    } } }
sourceSets {main {resources {srcDirs  'src/res'}}}
sourceSets{test{java{srcDirs "src/tests"}resources{srcDirs "src/res"}}}

//test { finalizedBy jacocoTestReport }
test.finalizedBy(project.tasks.jacocoTestReport)

jacocoTestReport {
   additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)

    reports {
        xml.enabled true
        csv.enabled true
        html.destination file("${buildDir}/reports/jacoco")
    }
    executionData = files('build/jacoco/test.exec')
}


repositories {
    mavenCentral()
    jcenter()
}

dependencies {



//    testCompile group: 'junit', name: 'junit', version: '4.12'
//    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
//    testCompile("org.junit.jupiter:junit-jupiter-api:5.0.0-M4")
//    testRuntime("org.junit.vintage:junit-vintage-engine:4.12.0-M4")
//    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.0.0-M4")
//    testCompile("org.junit.platform:junit-platform-runner:1.0.0-M4")

//    compile group: 'log4j', name: 'log4j', version: '1.2.17'

    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.0'

    compile group: 'org.hsqldb', name: 'hsqldb', version: '2.4.0'

    compile group: 'xerces', name: 'xercesImpl', version: '2.11.0'

//    compile group: 'us.fatehi', name: 'schemacrawler-hsqldb', version: '14.17.04'
    
//    compile 'com.google.code.gson:gson:2.8.2'
//    compile group: 'com.google.guava', name: 'guava', version: '23.5-jre'
//    compile group: 'com.google.inject', name: 'guice', version: '4.1.0'
//    compile group: 'com.google.http-client', name: 'google-http-client', version: '1.23.0'

//    compile group: 'org.apache.poi', name: 'poi', version: '3.16'
//    compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.16'
//    compile group: 'org.apache.poi', name: 'poi-ooxml-schemas', version: '3.16'
//    compile group: 'org.apache.poi', name: 'poi-scratchpad', version: '3.16'

//    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.2.12.Final'
//    compile group: 'org.hibernate', name: 'hibernate-jpamodelgen', version: '5.2.12.Final'
      
//      compile files('lib/scenicView.jar');

}

jar  {

    baseName = 'Komfort'
    version =  '0.1'

    manifest {
        attributes(
            "Class-Path": configurations.compile.collect {  "lib/" + it.getName() }.join(" "),
             'Main-Class': mainClass,
             'Manifest-Version': 1.0

        )
    }

    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }}
    from configurations.compile.collect {    entry -> zipTree(entry)  }
}


////  from configurations.testRuntime - configurations.runtime
//    from configurations.runtime


//compileJava.options.compilerArgs = ["-Xlint:unchecked", "-Xlint:deprecation"]



task copyLib(type: Copy) {

           into 'build/output/lib'
//           with jar
            from configurations.compile

}


distributions {
  main {
    contents {
      baseName = 'Komfort'
      into ('lib') {
        from (project.configurations.runtime)
      }

        from jar

    }
  }
}

task runApp(type: JavaExec) {
   classpath = sourceSets.main.runtimeClasspath

   main = 'basisFx.appCore.EntryPoint'

 }


build.dependsOn jacocoTestReport
//build.dependsOn info
build.dependsOn projectReport
build.dependsOn buildDashboard
build.dependsOn copyLib
g
build.dependsOn distZip

distZip.dependsOn  assemble

